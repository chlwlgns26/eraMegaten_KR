◆gitって何？
・バージョン管理システム（Version Control System）の一種
古くはCVSとかSubversionとかあった中で今一番流行ってるのがgit。
バージョン管理システムを一言で表すと、「（バージョン管理システムを使い始めた）最初のバージョンから現在まで全てのバージョンを一つのフォルダに保存できる」優れモノ。
これを一度使い出すともうバージョン管理システム無しでガシガシ大事なファイルを弄るのが億劫になる。

謎の半導体企業NVIDIAとかオープンソースに敵対する連中に中指を立てたFxxkサインを出す事で有名なLinux開発者のリーナスがオリジナル作者。
これはもうeraのようなファッキングなソフトのために作られたと言っても過言では無いでしょ…
2005年にリーナスが作ってからLinux開発でガシガシ使われたのをきっかけに多人数ソフトウェア開発ではオープンソースに限らず使われている。
近年ではMicrosoftもgitのヘビーユーザーになった事で有名。
正式な発音はギット。

◆gitでバージョン管理すると何が出来るの？
・バージョン管理が無い世界
- パッチ作者（ローカルでもgit不使用）の場合
「パッチ作ろう」
「作業用に変更無しの本体＋私家版パッチを落として来た」or「最後の私家版パッチから今日までのパッチ1個1個入れた」
「パッチ出来たぞ！」
「あっ、他の人が先に上げたパッチと弄るファイル（例:_Rename.csv）被ってた…変更部分統合しないと…」
「パッチ出来たぞ！（2度目）」
「アップローダーに上げたぞ」
〜後日〜
「知らない間に誰かに弄られて壊れてるんだが！？」
「というかこっちで統合する時に弄った所もバグってるんだが！？」

- プレイ専門のeraMegatenユーザーの場合
「面白そうなパッチ来たけどzip1個1個入れるの面倒臭いな…」
「カーチャン待とう（そして1〜2か月）」

・バージョン管理がある世界
- パッチ作者の場合
「パッチ作ろう」
「eraMegaten共有のgitリポジトリ（貯蔵庫）からPCのローカルリポジトリに今日時点の最新バージョンをフェッチ（取得）して来たぞ」
「スケベコマンド追加パッチだから【機能/スケベコマンド追加】でブランチ（枝分かれ）を作ったぞ」
「パッチ出来たぞ！」
「あっ、他の人が先に上げたパッチと弄るファイル（例:_Rename.csv）被ってたな。でもgitがマージ（結合）してくれたから手で弄る所なかったな（※1）」
「eraMegaten全体共有のgitリポジトリに【機能/スケベコマンド追加】ブランチをアップロードしてプルリクエスト出したぞ」＆「アップローダーに変更ファイルを上げたぞ」
〜当日〜
『ここの行Emueraが落ちそうな気がします（※2）』
「あ、ほんとだ。直して上げ直します」
『大丈夫そうなのでマージしますね』
〜後日〜
「お、Bさんが僕のパッチ部分に更に機能追加してくれてるな。123行目にアクメイベントを入れたのか」


- プレイ専門のeraMegatenユーザーの場合
「面白そうなパッチ来たけどzip1個1個入れるの面倒臭いな…」
「お、もう今日の最新版に入ってるじゃん。これで遊べるな（※3）」

※1：gitでは他の人が作った作業ブランチを自分の作業ブランチに自動マージする事ができ、「Aさんが作った追加・削除分」と「Bさんが作った追加・削除分」を自動で統合してくれる。
　ただ、どちらも同じ行を弄ってしまった場合は「どっちを採用するんや？」とgitに聞かれる（コンフリクト＝衝突）のでそこだけ注意しよう。逆に言うとそこ以外は無視できるようになる。

※2：gitは多人数開発のためブラウザでの確認機能が充実しており、最新版とブランチとの差分だけを表示してくれるので第三者でもバグの混入に気付き易くなるようになっている。
　また、後からバグに気付いた際でも特定のファイルが1つ1つのバージョンでどの部分が変更されたのかヒストリーを確認できるため、複雑なバグでもメンテナンス性が非常に向上する。

※3：Webサーバー上にあるgitgitではブラウザから最新版を丸ごとDLできる機能があるため、全体共有リポジトリから機能ブランチがマージされたら皆がその日からそのバージョンを遊ぶことが出来る。
　GitHub等の最新サービスではブラウザ上エディタもあるので、全体共有リポジトリに直接コミット可能なユーザーは、ケアレスミスを見つけたらその場で修正することもできる。（壊す危険もあるので平時は非推奨）

◆gitの構成

gitクライアント（PCローカル：これだけでも自分1人で上の「全体共有のgitリポジトリ」に関わらない機能は全て使えるので今日からでも導入超おススメ）
↓↑
gitサーバー（Webサーバーリモート：複数人のgitブランチをまとめるにはこれが必須。オープンソースなので無料サービスや自作サーバー用ソフトがゴロゴロ転がっている）

era界隈でも利用規約を損なわずに使えるgitサーバーについては板の開発環境スレの人が作ってくれていたemuera.git（https://jbbs.shitaraba.net/bbs/read.cgi/otaku/16783/1420605244/45）があるので、
やろうと思えばどのバリアントも今すぐリポジトリを作成できる状態です。（emuera.gitにあるバリアント例：eratohoYM(C#)、 tentacle_world、eratohoK向け口上ベース）
ログインしないとリポジトリを閲覧できないプライベート設定も可能（又これはGitHubでも可能）なので、界隈外の人に広がるリスクというのも極限まで抑えられます。（これで外に広がるのはアレな人が居る場合なのでgit関係無くどうしようもない…）

◆まとめ
例えば、先日NTR用好感度のCFLAGをCDFLAGに移行しましたが、あれもERB・ERHファイル合計20個28500行程度の中から該当箇所を100行以上探して修正する必要があった大規模改修で、
やるだけでもEraBasicの変数定義参照や使いやすいgrep検索に対応したテキストエディタ（旧ロダが死んでしまった今だとVSCodeオンリー？）の操作に熟練したパッチ作者じゃないと手を出す気にすらならないし、
アップローダーにファイルを上げる手順だとgitと違って「差分のみ」の受け渡しが出来ずに第三者からのバグチェックを受けられないというのがあって手を出す人がまず居ないのが現状です。
また、gitの場合だとプレイ専のユーザーも手軽に遊べるようになるまでの待ち時間が圧倒的に減るので、
パッチ提出→バグ報告・感想出しまでのサイクルが高速化しeraMegaten界隈もより盛り上がるだろうというのが個人的な考えです。
Ｎ鳥さんが開発していた頃から10年以上、eraMegatenについてはプレイ専の期間の方が長かったので、もうちょっとプレイ専に優しい方向にeraMegatenが進んで欲しい…！というのがgit導入を勧めた理由でした。
上記の通り、全方位でメリットが圧倒的に多いので、カーチャンを含むeraMegatenパッチ作者による共同管理のeraMegaten公式gitリポジトリは是が非でも開設したい…！という気持ちは今でも変わりません。
機能変更・修正パッチを作った立場からすると

記：がめら


P.S.そもそもカーチャンがSVNかgitユーザーっぽい…（2015年のログ） https://jbbs.shitaraba.net/bbs/read.cgi/otaku/16783/1420605244/7